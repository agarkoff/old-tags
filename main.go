package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"os/exec"
	"strings"
	"time"
)

func main() {
	repos, err := readReposFromFile("repos.txt")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ repos.txt: %v", err)
	}

	if len(repos) == 0 {
		log.Fatal("–§–∞–π–ª repos.txt –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫")
	}

	for _, repoURL := range repos {
		fmt.Printf("\nüîß –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: %s\n", repoURL)
		processRepository(repoURL)
	}
}

func readReposFromFile(filename string) ([]string, error) {
	file, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	var repos []string
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		if line != "" && !strings.HasPrefix(line, "#") {
			repos = append(repos, line)
		}
	}
	return repos, scanner.Err()
}

func processRepository(repoURL string) {
	tmpDir, err := os.MkdirTemp("", "git-tags-*")
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: %v\n", err)
		return
	}
	defer os.RemoveAll(tmpDir)

	// –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
	fmt.Println("–ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...")
	cmd := exec.Command("git", "clone", "--quiet", repoURL, tmpDir)
	if err := cmd.Run(); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è %s: %v\n", repoURL, err)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
	cmd = exec.Command("git", "for-each-ref",
		"--sort=creatordate",
		"--format=%(refname:short)|%(creatordate:iso8601)",
		"refs/tags")
	cmd.Dir = tmpDir
	output, err := cmd.Output()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤: %v\n", err)
		return
	}

	lines := strings.Split(strings.TrimSpace(string(output)), "\n")
	if len(lines) == 1 && lines[0] == "" {
		fmt.Println("–¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
		return
	}

	fmt.Printf("%-30s %-25s %-15s\n", "–¢–µ–≥", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–¢–∏–ø —Ç–µ–≥–∞")
	fmt.Println(strings.Repeat("-", 75))

	now := time.Now()
	monthAgo := now.AddDate(0, -1, 0)
	var tagsToDelete []string

	for _, line := range lines {
		parts := strings.SplitN(line, "|", 2)
		if len(parts) != 2 {
			continue
		}
		tagName := parts[0]
		createdStr := parts[1]
		tagType := getTagType(tmpDir, tagName)

		fmt.Printf("%-30s %-25s %-15s\n", tagName, createdStr, tagType)

		createdTime, err := time.Parse("2006-01-02 15:04:05 -0700", createdStr)
		if err != nil {
			continue
		}

		if !strings.HasPrefix(tagName, "release") && createdTime.Before(monthAgo) {
			tagsToDelete = append(tagsToDelete, tagName)
		}
	}

	fmt.Printf("–í—Å–µ–≥–æ —Ç–µ–≥–æ–≤: %d\n", len(lines))

	// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
	if len(tagsToDelete) > 0 {
		fmt.Println("–£–¥–∞–ª—è—é—Ç—Å—è –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ–≥–∏:")
		for _, tag := range tagsToDelete {
			fmt.Println(" -", tag)

			// –õ–æ–∫–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
			delCmd := exec.Command("git", "tag", "-d", tag)
			delCmd.Dir = tmpDir
			err := delCmd.Run()
			if err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞ %s: %v\n", tag, err)
				continue
			}

			// –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞ origin
			pushDelCmd := exec.Command("git", "push", "origin", "--delete", tag)
			pushDelCmd.Dir = tmpDir
			err = pushDelCmd.Run()
			if err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞ %s –∏–∑ origin: %v\n", tag, err)
			} else {
				fmt.Printf("–¢–µ–≥ %s —É–¥–∞–ª—ë–Ω –∏–∑ origin.\n", tag)
			}
		}
	} else {
		fmt.Println("–ù–µ—Ç —Ç–µ–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
	}
}

func getTagType(repoPath, tag string) string {
	cmd := exec.Command("git", "cat-file", "-t", tag)
	cmd.Dir = repoPath
	out, err := cmd.Output()
	if err != nil {
		return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
	}
	t := strings.TrimSpace(string(out))
	if t == "tag" {
		return "–∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"
	}
	if t == "commit" {
		return "–ª–µ–≥–∫–æ–≤–µ—Å–Ω—ã–π"
	}
	return t
}
